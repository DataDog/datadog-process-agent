// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package ebpf

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf(in *jlexer.Lexer, out *Connections) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "connections":
			if in.IsNull() {
				in.Skip()
				out.Conns = nil
			} else {
				in.Delim('[')
				if out.Conns == nil {
					if !in.IsDelim(']') {
						out.Conns = make([]ConnectionStats, 0, 1)
					} else {
						out.Conns = []ConnectionStats{}
					}
				} else {
					out.Conns = (out.Conns)[:0]
				}
				for !in.IsDelim(']') {
					var v1 ConnectionStats
					(v1).UnmarshalEasyJSON(in)
					out.Conns = append(out.Conns, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "common_ports_by_pid":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.CommonPortsByPID = make(map[int32]CommonPorts)
				} else {
					out.CommonPortsByPID = nil
				}
				for !in.IsDelim('}') {
					key := int32(in.Int32Str())
					in.WantColon()
					var v2 CommonPorts
					easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf1(in, &v2)
					(out.CommonPortsByPID)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf(out *jwriter.Writer, in Connections) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"connections\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Conns == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Conns {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"common_ports_by_pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.CommonPortsByPID == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.CommonPortsByPID {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.Int32Str(int32(v5Name))
				out.RawByte(':')
				easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf1(out, v5Value)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Connections) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Connections) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Connections) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Connections) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf(l, v)
}
func easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf1(in *jlexer.Lexer, out *CommonPorts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source_ports":
			if in.IsNull() {
				in.Skip()
				out.SourcePorts = nil
			} else {
				in.Delim('[')
				if out.SourcePorts == nil {
					if !in.IsDelim(']') {
						out.SourcePorts = make([]int32, 0, 16)
					} else {
						out.SourcePorts = []int32{}
					}
				} else {
					out.SourcePorts = (out.SourcePorts)[:0]
				}
				for !in.IsDelim(']') {
					var v6 int32
					v6 = int32(in.Int32())
					out.SourcePorts = append(out.SourcePorts, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "dest_ports":
			if in.IsNull() {
				in.Skip()
				out.DestPorts = nil
			} else {
				in.Delim('[')
				if out.DestPorts == nil {
					if !in.IsDelim(']') {
						out.DestPorts = make([]int32, 0, 16)
					} else {
						out.DestPorts = []int32{}
					}
				} else {
					out.DestPorts = (out.DestPorts)[:0]
				}
				for !in.IsDelim(']') {
					var v7 int32
					v7 = int32(in.Int32())
					out.DestPorts = append(out.DestPorts, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf1(out *jwriter.Writer, in CommonPorts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.SourcePorts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.SourcePorts {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v9))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"dest_ports\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.DestPorts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.DestPorts {
				if v10 > 0 {
					out.RawByte(',')
				}
				out.Int32(int32(v11))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf2(in *jlexer.Lexer, out *ConnectionStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.Pid = uint32(in.Uint32())
		case "type":
			out.Type = ConnectionType(in.Uint8())
		case "family":
			out.Family = ConnectionFamily(in.Uint8())
		case "net_ns":
			out.NetNS = uint32(in.Uint32())
		case "source":
			out.Source = string(in.String())
		case "dest":
			out.Dest = string(in.String())
		case "sport":
			out.SPort = uint16(in.Uint16())
		case "dport":
			out.DPort = uint16(in.Uint16())
		case "direction":
			out.Direction = ConnectionDirection(in.Uint8())
		case "monotonic_sent_bytes":
			out.MonotonicSentBytes = uint64(in.Uint64())
		case "last_sent_bytes":
			out.LastSentBytes = uint64(in.Uint64())
		case "monotonic_recv_bytes":
			out.MonotonicRecvBytes = uint64(in.Uint64())
		case "last_recv_bytes":
			out.LastRecvBytes = uint64(in.Uint64())
		case "monotonic_retransmits":
			out.MonotonicRetransmits = uint32(in.Uint32())
		case "last_retransmits":
			out.LastRetransmits = uint32(in.Uint32())
		case "last_update_epoch":
			out.LastUpdateEpoch = uint64(in.Uint64())
		case "rollup_count":
			out.RollUpCount = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf2(out *jwriter.Writer, in ConnectionStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.Pid))
	}
	{
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Type))
	}
	{
		const prefix string = ",\"family\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Family))
	}
	{
		const prefix string = ",\"net_ns\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.NetNS))
	}
	{
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"dest\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Dest))
	}
	{
		const prefix string = ",\"sport\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.SPort))
	}
	{
		const prefix string = ",\"dport\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.DPort))
	}
	{
		const prefix string = ",\"direction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint8(uint8(in.Direction))
	}
	{
		const prefix string = ",\"monotonic_sent_bytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.MonotonicSentBytes))
	}
	{
		const prefix string = ",\"last_sent_bytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.LastSentBytes))
	}
	{
		const prefix string = ",\"monotonic_recv_bytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.MonotonicRecvBytes))
	}
	{
		const prefix string = ",\"last_recv_bytes\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.LastRecvBytes))
	}
	{
		const prefix string = ",\"monotonic_retransmits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.MonotonicRetransmits))
	}
	{
		const prefix string = ",\"last_retransmits\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.LastRetransmits))
	}
	{
		const prefix string = ",\"last_update_epoch\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.LastUpdateEpoch))
	}
	{
		const prefix string = ",\"rollup_count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.RollUpCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConnectionStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConnectionStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5f1d7f40EncodeGithubComDataDogDatadogProcessAgentEbpf2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConnectionStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConnectionStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5f1d7f40DecodeGithubComDataDogDatadogProcessAgentEbpf2(l, v)
}
