// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent_payload.proto

package model

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CommonMetadata struct {
	AgentVersion string  `protobuf:"bytes,1,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	Timezone     string  `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	CurrentEpoch float64 `protobuf:"fixed64,3,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	InternalIp   string  `protobuf:"bytes,4,opt,name=internal_ip,json=internalIp,proto3" json:"internal_ip,omitempty"`
	PublicIp     string  `protobuf:"bytes,5,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	ApiKey       string  `protobuf:"bytes,6,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (m *CommonMetadata) Reset()         { *m = CommonMetadata{} }
func (m *CommonMetadata) String() string { return proto.CompactTextString(m) }
func (*CommonMetadata) ProtoMessage()    {}
func (*CommonMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{0}
}
func (m *CommonMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CommonMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CommonMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CommonMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommonMetadata.Merge(m, src)
}
func (m *CommonMetadata) XXX_Size() int {
	return m.Size()
}
func (m *CommonMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_CommonMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_CommonMetadata proto.InternalMessageInfo

func (m *CommonMetadata) GetAgentVersion() string {
	if m != nil {
		return m.AgentVersion
	}
	return ""
}

func (m *CommonMetadata) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CommonMetadata) GetCurrentEpoch() float64 {
	if m != nil {
		return m.CurrentEpoch
	}
	return 0
}

func (m *CommonMetadata) GetInternalIp() string {
	if m != nil {
		return m.InternalIp
	}
	return ""
}

func (m *CommonMetadata) GetPublicIp() string {
	if m != nil {
		return m.PublicIp
	}
	return ""
}

func (m *CommonMetadata) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

type MetricsPayload struct {
	Samples  []*MetricsPayload_Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
	Metadata *CommonMetadata          `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *MetricsPayload) Reset()         { *m = MetricsPayload{} }
func (m *MetricsPayload) String() string { return proto.CompactTextString(m) }
func (*MetricsPayload) ProtoMessage()    {}
func (*MetricsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{1}
}
func (m *MetricsPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsPayload.Merge(m, src)
}
func (m *MetricsPayload) XXX_Size() int {
	return m.Size()
}
func (m *MetricsPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsPayload.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsPayload proto.InternalMessageInfo

func (m *MetricsPayload) GetSamples() []*MetricsPayload_Sample {
	if m != nil {
		return m.Samples
	}
	return nil
}

func (m *MetricsPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type MetricsPayload_Sample struct {
	Metric         string                         `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Type           string                         `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Host           string                         `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Points         []*MetricsPayload_Sample_Point `protobuf:"bytes,4,rep,name=points,proto3" json:"points,omitempty"`
	Tags           []string                       `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`
	SourceTypeName string                         `protobuf:"bytes,6,opt,name=source_type_name,json=sourceTypeName,proto3" json:"source_type_name,omitempty"`
}

func (m *MetricsPayload_Sample) Reset()         { *m = MetricsPayload_Sample{} }
func (m *MetricsPayload_Sample) String() string { return proto.CompactTextString(m) }
func (*MetricsPayload_Sample) ProtoMessage()    {}
func (*MetricsPayload_Sample) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{1, 0}
}
func (m *MetricsPayload_Sample) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsPayload_Sample) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsPayload_Sample.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsPayload_Sample) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsPayload_Sample.Merge(m, src)
}
func (m *MetricsPayload_Sample) XXX_Size() int {
	return m.Size()
}
func (m *MetricsPayload_Sample) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsPayload_Sample.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsPayload_Sample proto.InternalMessageInfo

func (m *MetricsPayload_Sample) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *MetricsPayload_Sample) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *MetricsPayload_Sample) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *MetricsPayload_Sample) GetPoints() []*MetricsPayload_Sample_Point {
	if m != nil {
		return m.Points
	}
	return nil
}

func (m *MetricsPayload_Sample) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MetricsPayload_Sample) GetSourceTypeName() string {
	if m != nil {
		return m.SourceTypeName
	}
	return ""
}

type MetricsPayload_Sample_Point struct {
	Ts    int64   `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *MetricsPayload_Sample_Point) Reset()         { *m = MetricsPayload_Sample_Point{} }
func (m *MetricsPayload_Sample_Point) String() string { return proto.CompactTextString(m) }
func (*MetricsPayload_Sample_Point) ProtoMessage()    {}
func (*MetricsPayload_Sample_Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{1, 0, 0}
}
func (m *MetricsPayload_Sample_Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MetricsPayload_Sample_Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MetricsPayload_Sample_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MetricsPayload_Sample_Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MetricsPayload_Sample_Point.Merge(m, src)
}
func (m *MetricsPayload_Sample_Point) XXX_Size() int {
	return m.Size()
}
func (m *MetricsPayload_Sample_Point) XXX_DiscardUnknown() {
	xxx_messageInfo_MetricsPayload_Sample_Point.DiscardUnknown(m)
}

var xxx_messageInfo_MetricsPayload_Sample_Point proto.InternalMessageInfo

func (m *MetricsPayload_Sample_Point) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *MetricsPayload_Sample_Point) GetValue() float64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type ServiceChecksPayload struct {
	ServiceChecks []*ServiceChecksPayload_ServiceCheck `protobuf:"bytes,1,rep,name=service_checks,json=serviceChecks,proto3" json:"service_checks,omitempty"`
	Metadata      *CommonMetadata                      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ServiceChecksPayload) Reset()         { *m = ServiceChecksPayload{} }
func (m *ServiceChecksPayload) String() string { return proto.CompactTextString(m) }
func (*ServiceChecksPayload) ProtoMessage()    {}
func (*ServiceChecksPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{2}
}
func (m *ServiceChecksPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceChecksPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceChecksPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceChecksPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceChecksPayload.Merge(m, src)
}
func (m *ServiceChecksPayload) XXX_Size() int {
	return m.Size()
}
func (m *ServiceChecksPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceChecksPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceChecksPayload proto.InternalMessageInfo

func (m *ServiceChecksPayload) GetServiceChecks() []*ServiceChecksPayload_ServiceCheck {
	if m != nil {
		return m.ServiceChecks
	}
	return nil
}

func (m *ServiceChecksPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type ServiceChecksPayload_ServiceCheck struct {
	Name    string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host    string   `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Ts      int64    `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Status  int32    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Tags    []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *ServiceChecksPayload_ServiceCheck) Reset()         { *m = ServiceChecksPayload_ServiceCheck{} }
func (m *ServiceChecksPayload_ServiceCheck) String() string { return proto.CompactTextString(m) }
func (*ServiceChecksPayload_ServiceCheck) ProtoMessage()    {}
func (*ServiceChecksPayload_ServiceCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{2, 0}
}
func (m *ServiceChecksPayload_ServiceCheck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceChecksPayload_ServiceCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceChecksPayload_ServiceCheck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceChecksPayload_ServiceCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceChecksPayload_ServiceCheck.Merge(m, src)
}
func (m *ServiceChecksPayload_ServiceCheck) XXX_Size() int {
	return m.Size()
}
func (m *ServiceChecksPayload_ServiceCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceChecksPayload_ServiceCheck.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceChecksPayload_ServiceCheck proto.InternalMessageInfo

func (m *ServiceChecksPayload_ServiceCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceChecksPayload_ServiceCheck) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *ServiceChecksPayload_ServiceCheck) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *ServiceChecksPayload_ServiceCheck) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ServiceChecksPayload_ServiceCheck) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ServiceChecksPayload_ServiceCheck) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type EventsPayload struct {
	Events   []*EventsPayload_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	Metadata *CommonMetadata        `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *EventsPayload) Reset()         { *m = EventsPayload{} }
func (m *EventsPayload) String() string { return proto.CompactTextString(m) }
func (*EventsPayload) ProtoMessage()    {}
func (*EventsPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{3}
}
func (m *EventsPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsPayload.Merge(m, src)
}
func (m *EventsPayload) XXX_Size() int {
	return m.Size()
}
func (m *EventsPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsPayload.DiscardUnknown(m)
}

var xxx_messageInfo_EventsPayload proto.InternalMessageInfo

func (m *EventsPayload) GetEvents() []*EventsPayload_Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *EventsPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type EventsPayload_Event struct {
	Title          string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Text           string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Ts             int64    `protobuf:"varint,3,opt,name=ts,proto3" json:"ts,omitempty"`
	Priority       string   `protobuf:"bytes,4,opt,name=priority,proto3" json:"priority,omitempty"`
	Host           string   `protobuf:"bytes,5,opt,name=host,proto3" json:"host,omitempty"`
	Tags           []string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`
	AlertType      string   `protobuf:"bytes,7,opt,name=alert_type,json=alertType,proto3" json:"alert_type,omitempty"`
	AggregationKey string   `protobuf:"bytes,8,opt,name=aggregation_key,json=aggregationKey,proto3" json:"aggregation_key,omitempty"`
	SourceTypeName string   `protobuf:"bytes,9,opt,name=source_type_name,json=sourceTypeName,proto3" json:"source_type_name,omitempty"`
}

func (m *EventsPayload_Event) Reset()         { *m = EventsPayload_Event{} }
func (m *EventsPayload_Event) String() string { return proto.CompactTextString(m) }
func (*EventsPayload_Event) ProtoMessage()    {}
func (*EventsPayload_Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{3, 0}
}
func (m *EventsPayload_Event) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventsPayload_Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventsPayload_Event.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventsPayload_Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventsPayload_Event.Merge(m, src)
}
func (m *EventsPayload_Event) XXX_Size() int {
	return m.Size()
}
func (m *EventsPayload_Event) XXX_DiscardUnknown() {
	xxx_messageInfo_EventsPayload_Event.DiscardUnknown(m)
}

var xxx_messageInfo_EventsPayload_Event proto.InternalMessageInfo

func (m *EventsPayload_Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *EventsPayload_Event) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *EventsPayload_Event) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *EventsPayload_Event) GetPriority() string {
	if m != nil {
		return m.Priority
	}
	return ""
}

func (m *EventsPayload_Event) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *EventsPayload_Event) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *EventsPayload_Event) GetAlertType() string {
	if m != nil {
		return m.AlertType
	}
	return ""
}

func (m *EventsPayload_Event) GetAggregationKey() string {
	if m != nil {
		return m.AggregationKey
	}
	return ""
}

func (m *EventsPayload_Event) GetSourceTypeName() string {
	if m != nil {
		return m.SourceTypeName
	}
	return ""
}

type SketchPayload struct {
	Sketches []SketchPayload_Sketch `protobuf:"bytes,1,rep,name=sketches,proto3" json:"sketches"`
	Metadata CommonMetadata         `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata"`
}

func (m *SketchPayload) Reset()         { *m = SketchPayload{} }
func (m *SketchPayload) String() string { return proto.CompactTextString(m) }
func (*SketchPayload) ProtoMessage()    {}
func (*SketchPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{4}
}
func (m *SketchPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SketchPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SketchPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SketchPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SketchPayload.Merge(m, src)
}
func (m *SketchPayload) XXX_Size() int {
	return m.Size()
}
func (m *SketchPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_SketchPayload.DiscardUnknown(m)
}

var xxx_messageInfo_SketchPayload proto.InternalMessageInfo

func (m *SketchPayload) GetSketches() []SketchPayload_Sketch {
	if m != nil {
		return m.Sketches
	}
	return nil
}

func (m *SketchPayload) GetMetadata() CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return CommonMetadata{}
}

type SketchPayload_Sketch struct {
	Metric        string                              `protobuf:"bytes,1,opt,name=metric,proto3" json:"metric,omitempty"`
	Host          string                              `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Distributions []SketchPayload_Sketch_Distribution `protobuf:"bytes,3,rep,name=distributions,proto3" json:"distributions"`
	Tags          []string                            `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`
	Dogsketches   []SketchPayload_Sketch_Dogsketch    `protobuf:"bytes,7,rep,name=dogsketches,proto3" json:"dogsketches"`
}

func (m *SketchPayload_Sketch) Reset()         { *m = SketchPayload_Sketch{} }
func (m *SketchPayload_Sketch) String() string { return proto.CompactTextString(m) }
func (*SketchPayload_Sketch) ProtoMessage()    {}
func (*SketchPayload_Sketch) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{4, 0}
}
func (m *SketchPayload_Sketch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SketchPayload_Sketch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SketchPayload_Sketch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SketchPayload_Sketch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SketchPayload_Sketch.Merge(m, src)
}
func (m *SketchPayload_Sketch) XXX_Size() int {
	return m.Size()
}
func (m *SketchPayload_Sketch) XXX_DiscardUnknown() {
	xxx_messageInfo_SketchPayload_Sketch.DiscardUnknown(m)
}

var xxx_messageInfo_SketchPayload_Sketch proto.InternalMessageInfo

func (m *SketchPayload_Sketch) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *SketchPayload_Sketch) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SketchPayload_Sketch) GetDistributions() []SketchPayload_Sketch_Distribution {
	if m != nil {
		return m.Distributions
	}
	return nil
}

func (m *SketchPayload_Sketch) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *SketchPayload_Sketch) GetDogsketches() []SketchPayload_Sketch_Dogsketch {
	if m != nil {
		return m.Dogsketches
	}
	return nil
}

type SketchPayload_Sketch_Distribution struct {
	Ts    int64     `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Cnt   int64     `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Min   float64   `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max   float64   `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	Avg   float64   `protobuf:"fixed64,5,opt,name=avg,proto3" json:"avg,omitempty"`
	Sum   float64   `protobuf:"fixed64,6,opt,name=sum,proto3" json:"sum,omitempty"`
	V     []float64 `protobuf:"fixed64,7,rep,packed,name=v,proto3" json:"v,omitempty"`
	G     []uint32  `protobuf:"varint,8,rep,packed,name=g,proto3" json:"g,omitempty"`
	Delta []uint32  `protobuf:"varint,9,rep,packed,name=delta,proto3" json:"delta,omitempty"`
	Buf   []float64 `protobuf:"fixed64,10,rep,packed,name=buf,proto3" json:"buf,omitempty"`
}

func (m *SketchPayload_Sketch_Distribution) Reset()         { *m = SketchPayload_Sketch_Distribution{} }
func (m *SketchPayload_Sketch_Distribution) String() string { return proto.CompactTextString(m) }
func (*SketchPayload_Sketch_Distribution) ProtoMessage()    {}
func (*SketchPayload_Sketch_Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{4, 0, 0}
}
func (m *SketchPayload_Sketch_Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SketchPayload_Sketch_Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SketchPayload_Sketch_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SketchPayload_Sketch_Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SketchPayload_Sketch_Distribution.Merge(m, src)
}
func (m *SketchPayload_Sketch_Distribution) XXX_Size() int {
	return m.Size()
}
func (m *SketchPayload_Sketch_Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_SketchPayload_Sketch_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_SketchPayload_Sketch_Distribution proto.InternalMessageInfo

func (m *SketchPayload_Sketch_Distribution) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetAvg() float64 {
	if m != nil {
		return m.Avg
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SketchPayload_Sketch_Distribution) GetV() []float64 {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *SketchPayload_Sketch_Distribution) GetG() []uint32 {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *SketchPayload_Sketch_Distribution) GetDelta() []uint32 {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *SketchPayload_Sketch_Distribution) GetBuf() []float64 {
	if m != nil {
		return m.Buf
	}
	return nil
}

type SketchPayload_Sketch_Dogsketch struct {
	Ts  int64    `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	Cnt int64    `protobuf:"varint,2,opt,name=cnt,proto3" json:"cnt,omitempty"`
	Min float64  `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max float64  `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	Avg float64  `protobuf:"fixed64,5,opt,name=avg,proto3" json:"avg,omitempty"`
	Sum float64  `protobuf:"fixed64,6,opt,name=sum,proto3" json:"sum,omitempty"`
	K   []int32  `protobuf:"zigzag32,7,rep,packed,name=k,proto3" json:"k,omitempty"`
	N   []uint32 `protobuf:"varint,8,rep,packed,name=n,proto3" json:"n,omitempty"`
}

func (m *SketchPayload_Sketch_Dogsketch) Reset()         { *m = SketchPayload_Sketch_Dogsketch{} }
func (m *SketchPayload_Sketch_Dogsketch) String() string { return proto.CompactTextString(m) }
func (*SketchPayload_Sketch_Dogsketch) ProtoMessage()    {}
func (*SketchPayload_Sketch_Dogsketch) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{4, 0, 1}
}
func (m *SketchPayload_Sketch_Dogsketch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SketchPayload_Sketch_Dogsketch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SketchPayload_Sketch_Dogsketch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SketchPayload_Sketch_Dogsketch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SketchPayload_Sketch_Dogsketch.Merge(m, src)
}
func (m *SketchPayload_Sketch_Dogsketch) XXX_Size() int {
	return m.Size()
}
func (m *SketchPayload_Sketch_Dogsketch) XXX_DiscardUnknown() {
	xxx_messageInfo_SketchPayload_Sketch_Dogsketch.DiscardUnknown(m)
}

var xxx_messageInfo_SketchPayload_Sketch_Dogsketch proto.InternalMessageInfo

func (m *SketchPayload_Sketch_Dogsketch) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetCnt() int64 {
	if m != nil {
		return m.Cnt
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetAvg() float64 {
	if m != nil {
		return m.Avg
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetSum() float64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *SketchPayload_Sketch_Dogsketch) GetK() []int32 {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *SketchPayload_Sketch_Dogsketch) GetN() []uint32 {
	if m != nil {
		return m.N
	}
	return nil
}

type HostMetadataPayload struct {
	HostsMetadata []*HostMetadataPayload_HostMetadata `protobuf:"bytes,1,rep,name=hosts_metadata,json=hostsMetadata,proto3" json:"hosts_metadata,omitempty"`
	Metadata      *CommonMetadata                     `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *HostMetadataPayload) Reset()         { *m = HostMetadataPayload{} }
func (m *HostMetadataPayload) String() string { return proto.CompactTextString(m) }
func (*HostMetadataPayload) ProtoMessage()    {}
func (*HostMetadataPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{5}
}
func (m *HostMetadataPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostMetadataPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostMetadataPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostMetadataPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMetadataPayload.Merge(m, src)
}
func (m *HostMetadataPayload) XXX_Size() int {
	return m.Size()
}
func (m *HostMetadataPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMetadataPayload.DiscardUnknown(m)
}

var xxx_messageInfo_HostMetadataPayload proto.InternalMessageInfo

func (m *HostMetadataPayload) GetHostsMetadata() []*HostMetadataPayload_HostMetadata {
	if m != nil {
		return m.HostsMetadata
	}
	return nil
}

func (m *HostMetadataPayload) GetMetadata() *CommonMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type HostMetadataPayload_TagSet struct {
	Type string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Tags []string `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (m *HostMetadataPayload_TagSet) Reset()         { *m = HostMetadataPayload_TagSet{} }
func (m *HostMetadataPayload_TagSet) String() string { return proto.CompactTextString(m) }
func (*HostMetadataPayload_TagSet) ProtoMessage()    {}
func (*HostMetadataPayload_TagSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{5, 0}
}
func (m *HostMetadataPayload_TagSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostMetadataPayload_TagSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostMetadataPayload_TagSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostMetadataPayload_TagSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMetadataPayload_TagSet.Merge(m, src)
}
func (m *HostMetadataPayload_TagSet) XXX_Size() int {
	return m.Size()
}
func (m *HostMetadataPayload_TagSet) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMetadataPayload_TagSet.DiscardUnknown(m)
}

var xxx_messageInfo_HostMetadataPayload_TagSet proto.InternalMessageInfo

func (m *HostMetadataPayload_TagSet) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HostMetadataPayload_TagSet) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type HostMetadataPayload_HostMetadata struct {
	Hostname string                        `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Tags     []*HostMetadataPayload_TagSet `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	Aliases  []string                      `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (m *HostMetadataPayload_HostMetadata) Reset()         { *m = HostMetadataPayload_HostMetadata{} }
func (m *HostMetadataPayload_HostMetadata) String() string { return proto.CompactTextString(m) }
func (*HostMetadataPayload_HostMetadata) ProtoMessage()    {}
func (*HostMetadataPayload_HostMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{5, 1}
}
func (m *HostMetadataPayload_HostMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostMetadataPayload_HostMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostMetadataPayload_HostMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostMetadataPayload_HostMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostMetadataPayload_HostMetadata.Merge(m, src)
}
func (m *HostMetadataPayload_HostMetadata) XXX_Size() int {
	return m.Size()
}
func (m *HostMetadataPayload_HostMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_HostMetadataPayload_HostMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_HostMetadataPayload_HostMetadata proto.InternalMessageInfo

func (m *HostMetadataPayload_HostMetadata) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostMetadataPayload_HostMetadata) GetTags() []*HostMetadataPayload_TagSet {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *HostMetadataPayload_HostMetadata) GetAliases() []string {
	if m != nil {
		return m.Aliases
	}
	return nil
}

type KubeMetadataPayload struct {
	Deployments []*KubeMetadataPayload_Deployment `protobuf:"bytes,1,rep,name=deployments,proto3" json:"deployments,omitempty"`
	ReplicaSets []*KubeMetadataPayload_ReplicaSet `protobuf:"bytes,2,rep,name=replica_sets,json=replicaSets,proto3" json:"replica_sets,omitempty"`
	DaemonSets  []*KubeMetadataPayload_DaemonSet  `protobuf:"bytes,3,rep,name=daemon_sets,json=daemonSets,proto3" json:"daemon_sets,omitempty"`
	Services    []*KubeMetadataPayload_Service    `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	Jobs        []*KubeMetadataPayload_Job        `protobuf:"bytes,5,rep,name=jobs,proto3" json:"jobs,omitempty"`
	Pods        []*KubeMetadataPayload_Pod        `protobuf:"bytes,6,rep,name=pods,proto3" json:"pods,omitempty"`
	Containers  []*KubeMetadataPayload_Container  `protobuf:"bytes,7,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (m *KubeMetadataPayload) Reset()         { *m = KubeMetadataPayload{} }
func (m *KubeMetadataPayload) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload) ProtoMessage()    {}
func (*KubeMetadataPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6}
}
func (m *KubeMetadataPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload.Merge(m, src)
}
func (m *KubeMetadataPayload) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload proto.InternalMessageInfo

func (m *KubeMetadataPayload) GetDeployments() []*KubeMetadataPayload_Deployment {
	if m != nil {
		return m.Deployments
	}
	return nil
}

func (m *KubeMetadataPayload) GetReplicaSets() []*KubeMetadataPayload_ReplicaSet {
	if m != nil {
		return m.ReplicaSets
	}
	return nil
}

func (m *KubeMetadataPayload) GetDaemonSets() []*KubeMetadataPayload_DaemonSet {
	if m != nil {
		return m.DaemonSets
	}
	return nil
}

func (m *KubeMetadataPayload) GetServices() []*KubeMetadataPayload_Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *KubeMetadataPayload) GetJobs() []*KubeMetadataPayload_Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

func (m *KubeMetadataPayload) GetPods() []*KubeMetadataPayload_Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

func (m *KubeMetadataPayload) GetContainers() []*KubeMetadataPayload_Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type KubeMetadataPayload_Deployment struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *KubeMetadataPayload_Deployment) Reset()         { *m = KubeMetadataPayload_Deployment{} }
func (m *KubeMetadataPayload_Deployment) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_Deployment) ProtoMessage()    {}
func (*KubeMetadataPayload_Deployment) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 0}
}
func (m *KubeMetadataPayload_Deployment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_Deployment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_Deployment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_Deployment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_Deployment.Merge(m, src)
}
func (m *KubeMetadataPayload_Deployment) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_Deployment) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_Deployment.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_Deployment proto.InternalMessageInfo

func (m *KubeMetadataPayload_Deployment) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KubeMetadataPayload_Deployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_Deployment) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type KubeMetadataPayload_ReplicaSet struct {
	Uid        string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace  string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Deployment string `protobuf:"bytes,4,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (m *KubeMetadataPayload_ReplicaSet) Reset()         { *m = KubeMetadataPayload_ReplicaSet{} }
func (m *KubeMetadataPayload_ReplicaSet) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_ReplicaSet) ProtoMessage()    {}
func (*KubeMetadataPayload_ReplicaSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 1}
}
func (m *KubeMetadataPayload_ReplicaSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_ReplicaSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_ReplicaSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_ReplicaSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_ReplicaSet.Merge(m, src)
}
func (m *KubeMetadataPayload_ReplicaSet) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_ReplicaSet) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_ReplicaSet.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_ReplicaSet proto.InternalMessageInfo

func (m *KubeMetadataPayload_ReplicaSet) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KubeMetadataPayload_ReplicaSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_ReplicaSet) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KubeMetadataPayload_ReplicaSet) GetDeployment() string {
	if m != nil {
		return m.Deployment
	}
	return ""
}

type KubeMetadataPayload_DaemonSet struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *KubeMetadataPayload_DaemonSet) Reset()         { *m = KubeMetadataPayload_DaemonSet{} }
func (m *KubeMetadataPayload_DaemonSet) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_DaemonSet) ProtoMessage()    {}
func (*KubeMetadataPayload_DaemonSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 2}
}
func (m *KubeMetadataPayload_DaemonSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_DaemonSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_DaemonSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_DaemonSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_DaemonSet.Merge(m, src)
}
func (m *KubeMetadataPayload_DaemonSet) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_DaemonSet) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_DaemonSet.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_DaemonSet proto.InternalMessageInfo

func (m *KubeMetadataPayload_DaemonSet) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KubeMetadataPayload_DaemonSet) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_DaemonSet) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type KubeMetadataPayload_Service struct {
	Uid       string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string            `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Selector  map[string]string `protobuf:"bytes,4,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type      string            `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *KubeMetadataPayload_Service) Reset()         { *m = KubeMetadataPayload_Service{} }
func (m *KubeMetadataPayload_Service) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_Service) ProtoMessage()    {}
func (*KubeMetadataPayload_Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 3}
}
func (m *KubeMetadataPayload_Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_Service.Merge(m, src)
}
func (m *KubeMetadataPayload_Service) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_Service) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_Service.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_Service proto.InternalMessageInfo

func (m *KubeMetadataPayload_Service) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KubeMetadataPayload_Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_Service) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KubeMetadataPayload_Service) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *KubeMetadataPayload_Service) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type KubeMetadataPayload_Job struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (m *KubeMetadataPayload_Job) Reset()         { *m = KubeMetadataPayload_Job{} }
func (m *KubeMetadataPayload_Job) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_Job) ProtoMessage()    {}
func (*KubeMetadataPayload_Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 4}
}
func (m *KubeMetadataPayload_Job) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_Job.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_Job.Merge(m, src)
}
func (m *KubeMetadataPayload_Job) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_Job) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_Job.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_Job proto.InternalMessageInfo

func (m *KubeMetadataPayload_Job) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KubeMetadataPayload_Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_Job) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type KubeMetadataPayload_Pod struct {
	Uid                   string            `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                  string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace             string            `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	HostIp                string            `protobuf:"bytes,4,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	PodIp                 string            `protobuf:"bytes,5,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
	Labels                map[string]string `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceUids           []string          `protobuf:"bytes,7,rep,name=service_uids,json=serviceUids,proto3" json:"service_uids,omitempty"`
	ContainerIds          []string          `protobuf:"bytes,8,rep,name=container_ids,json=containerIds,proto3" json:"container_ids,omitempty"`
	DaemonSet             string            `protobuf:"bytes,9,opt,name=daemon_set,json=daemonSet,proto3" json:"daemon_set,omitempty"`
	ReplicaSet            string            `protobuf:"bytes,10,opt,name=replica_set,json=replicaSet,proto3" json:"replica_set,omitempty"`
	ReplicationController string            `protobuf:"bytes,11,opt,name=replication_controller,json=replicationController,proto3" json:"replication_controller,omitempty"`
	Job                   string            `protobuf:"bytes,12,opt,name=job,proto3" json:"job,omitempty"`
}

func (m *KubeMetadataPayload_Pod) Reset()         { *m = KubeMetadataPayload_Pod{} }
func (m *KubeMetadataPayload_Pod) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_Pod) ProtoMessage()    {}
func (*KubeMetadataPayload_Pod) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 5}
}
func (m *KubeMetadataPayload_Pod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_Pod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_Pod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_Pod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_Pod.Merge(m, src)
}
func (m *KubeMetadataPayload_Pod) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_Pod) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_Pod.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_Pod proto.InternalMessageInfo

func (m *KubeMetadataPayload_Pod) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetHostIp() string {
	if m != nil {
		return m.HostIp
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetPodIp() string {
	if m != nil {
		return m.PodIp
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *KubeMetadataPayload_Pod) GetServiceUids() []string {
	if m != nil {
		return m.ServiceUids
	}
	return nil
}

func (m *KubeMetadataPayload_Pod) GetContainerIds() []string {
	if m != nil {
		return m.ContainerIds
	}
	return nil
}

func (m *KubeMetadataPayload_Pod) GetDaemonSet() string {
	if m != nil {
		return m.DaemonSet
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetReplicaSet() string {
	if m != nil {
		return m.ReplicaSet
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetReplicationController() string {
	if m != nil {
		return m.ReplicationController
	}
	return ""
}

func (m *KubeMetadataPayload_Pod) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

type KubeMetadataPayload_Container struct {
	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Image   string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	ImageId string `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
}

func (m *KubeMetadataPayload_Container) Reset()         { *m = KubeMetadataPayload_Container{} }
func (m *KubeMetadataPayload_Container) String() string { return proto.CompactTextString(m) }
func (*KubeMetadataPayload_Container) ProtoMessage()    {}
func (*KubeMetadataPayload_Container) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{6, 6}
}
func (m *KubeMetadataPayload_Container) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubeMetadataPayload_Container) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubeMetadataPayload_Container.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubeMetadataPayload_Container) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubeMetadataPayload_Container.Merge(m, src)
}
func (m *KubeMetadataPayload_Container) XXX_Size() int {
	return m.Size()
}
func (m *KubeMetadataPayload_Container) XXX_DiscardUnknown() {
	xxx_messageInfo_KubeMetadataPayload_Container.DiscardUnknown(m)
}

var xxx_messageInfo_KubeMetadataPayload_Container proto.InternalMessageInfo

func (m *KubeMetadataPayload_Container) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KubeMetadataPayload_Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeMetadataPayload_Container) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *KubeMetadataPayload_Container) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

type ECSMetadataPayload struct {
	Tasks []*ECSMetadataPayload_Task `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (m *ECSMetadataPayload) Reset()         { *m = ECSMetadataPayload{} }
func (m *ECSMetadataPayload) String() string { return proto.CompactTextString(m) }
func (*ECSMetadataPayload) ProtoMessage()    {}
func (*ECSMetadataPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{7}
}
func (m *ECSMetadataPayload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ECSMetadataPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ECSMetadataPayload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ECSMetadataPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ECSMetadataPayload.Merge(m, src)
}
func (m *ECSMetadataPayload) XXX_Size() int {
	return m.Size()
}
func (m *ECSMetadataPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ECSMetadataPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ECSMetadataPayload proto.InternalMessageInfo

func (m *ECSMetadataPayload) GetTasks() []*ECSMetadataPayload_Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type ECSMetadataPayload_Task struct {
	Arn           string                          `protobuf:"bytes,1,opt,name=arn,proto3" json:"arn,omitempty"`
	DesiredStatus string                          `protobuf:"bytes,2,opt,name=desired_status,json=desiredStatus,proto3" json:"desired_status,omitempty"`
	KnownStatus   string                          `protobuf:"bytes,3,opt,name=known_status,json=knownStatus,proto3" json:"known_status,omitempty"`
	Family        string                          `protobuf:"bytes,4,opt,name=family,proto3" json:"family,omitempty"`
	Version       string                          `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Containers    []*ECSMetadataPayload_Container `protobuf:"bytes,6,rep,name=containers,proto3" json:"containers,omitempty"`
}

func (m *ECSMetadataPayload_Task) Reset()         { *m = ECSMetadataPayload_Task{} }
func (m *ECSMetadataPayload_Task) String() string { return proto.CompactTextString(m) }
func (*ECSMetadataPayload_Task) ProtoMessage()    {}
func (*ECSMetadataPayload_Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{7, 0}
}
func (m *ECSMetadataPayload_Task) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ECSMetadataPayload_Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ECSMetadataPayload_Task.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ECSMetadataPayload_Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ECSMetadataPayload_Task.Merge(m, src)
}
func (m *ECSMetadataPayload_Task) XXX_Size() int {
	return m.Size()
}
func (m *ECSMetadataPayload_Task) XXX_DiscardUnknown() {
	xxx_messageInfo_ECSMetadataPayload_Task.DiscardUnknown(m)
}

var xxx_messageInfo_ECSMetadataPayload_Task proto.InternalMessageInfo

func (m *ECSMetadataPayload_Task) GetArn() string {
	if m != nil {
		return m.Arn
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetDesiredStatus() string {
	if m != nil {
		return m.DesiredStatus
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetKnownStatus() string {
	if m != nil {
		return m.KnownStatus
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ECSMetadataPayload_Task) GetContainers() []*ECSMetadataPayload_Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

type ECSMetadataPayload_Container struct {
	DockerId   string `protobuf:"bytes,1,opt,name=docker_id,json=dockerId,proto3" json:"docker_id,omitempty"`
	DockerName string `protobuf:"bytes,2,opt,name=docker_name,json=dockerName,proto3" json:"docker_name,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *ECSMetadataPayload_Container) Reset()         { *m = ECSMetadataPayload_Container{} }
func (m *ECSMetadataPayload_Container) String() string { return proto.CompactTextString(m) }
func (*ECSMetadataPayload_Container) ProtoMessage()    {}
func (*ECSMetadataPayload_Container) Descriptor() ([]byte, []int) {
	return fileDescriptor_bddccf659a49dc88, []int{7, 1}
}
func (m *ECSMetadataPayload_Container) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ECSMetadataPayload_Container) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ECSMetadataPayload_Container.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ECSMetadataPayload_Container) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ECSMetadataPayload_Container.Merge(m, src)
}
func (m *ECSMetadataPayload_Container) XXX_Size() int {
	return m.Size()
}
func (m *ECSMetadataPayload_Container) XXX_DiscardUnknown() {
	xxx_messageInfo_ECSMetadataPayload_Container.DiscardUnknown(m)
}

var xxx_messageInfo_ECSMetadataPayload_Container proto.InternalMessageInfo

func (m *ECSMetadataPayload_Container) GetDockerId() string {
	if m != nil {
		return m.DockerId
	}
	return ""
}

func (m *ECSMetadataPayload_Container) GetDockerName() string {
	if m != nil {
		return m.DockerName
	}
	return ""
}

func (m *ECSMetadataPayload_Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*CommonMetadata)(nil), "datadog.agentpayload.CommonMetadata")
	proto.RegisterType((*MetricsPayload)(nil), "datadog.agentpayload.MetricsPayload")
	proto.RegisterType((*MetricsPayload_Sample)(nil), "datadog.agentpayload.MetricsPayload.Sample")
	proto.RegisterType((*MetricsPayload_Sample_Point)(nil), "datadog.agentpayload.MetricsPayload.Sample.Point")
	proto.RegisterType((*ServiceChecksPayload)(nil), "datadog.agentpayload.ServiceChecksPayload")
	proto.RegisterType((*ServiceChecksPayload_ServiceCheck)(nil), "datadog.agentpayload.ServiceChecksPayload.ServiceCheck")
	proto.RegisterType((*EventsPayload)(nil), "datadog.agentpayload.EventsPayload")
	proto.RegisterType((*EventsPayload_Event)(nil), "datadog.agentpayload.EventsPayload.Event")
	proto.RegisterType((*SketchPayload)(nil), "datadog.agentpayload.SketchPayload")
	proto.RegisterType((*SketchPayload_Sketch)(nil), "datadog.agentpayload.SketchPayload.Sketch")
	proto.RegisterType((*SketchPayload_Sketch_Distribution)(nil), "datadog.agentpayload.SketchPayload.Sketch.Distribution")
	proto.RegisterType((*SketchPayload_Sketch_Dogsketch)(nil), "datadog.agentpayload.SketchPayload.Sketch.Dogsketch")
	proto.RegisterType((*HostMetadataPayload)(nil), "datadog.agentpayload.HostMetadataPayload")
	proto.RegisterType((*HostMetadataPayload_TagSet)(nil), "datadog.agentpayload.HostMetadataPayload.TagSet")
	proto.RegisterType((*HostMetadataPayload_HostMetadata)(nil), "datadog.agentpayload.HostMetadataPayload.HostMetadata")
	proto.RegisterType((*KubeMetadataPayload)(nil), "datadog.agentpayload.KubeMetadataPayload")
	proto.RegisterType((*KubeMetadataPayload_Deployment)(nil), "datadog.agentpayload.KubeMetadataPayload.Deployment")
	proto.RegisterType((*KubeMetadataPayload_ReplicaSet)(nil), "datadog.agentpayload.KubeMetadataPayload.ReplicaSet")
	proto.RegisterType((*KubeMetadataPayload_DaemonSet)(nil), "datadog.agentpayload.KubeMetadataPayload.DaemonSet")
	proto.RegisterType((*KubeMetadataPayload_Service)(nil), "datadog.agentpayload.KubeMetadataPayload.Service")
	proto.RegisterMapType((map[string]string)(nil), "datadog.agentpayload.KubeMetadataPayload.Service.SelectorEntry")
	proto.RegisterType((*KubeMetadataPayload_Job)(nil), "datadog.agentpayload.KubeMetadataPayload.Job")
	proto.RegisterType((*KubeMetadataPayload_Pod)(nil), "datadog.agentpayload.KubeMetadataPayload.Pod")
	proto.RegisterMapType((map[string]string)(nil), "datadog.agentpayload.KubeMetadataPayload.Pod.LabelsEntry")
	proto.RegisterType((*KubeMetadataPayload_Container)(nil), "datadog.agentpayload.KubeMetadataPayload.Container")
	proto.RegisterType((*ECSMetadataPayload)(nil), "datadog.agentpayload.ECSMetadataPayload")
	proto.RegisterType((*ECSMetadataPayload_Task)(nil), "datadog.agentpayload.ECSMetadataPayload.Task")
	proto.RegisterType((*ECSMetadataPayload_Container)(nil), "datadog.agentpayload.ECSMetadataPayload.Container")
}

func init() { proto.RegisterFile("agent_payload.proto", fileDescriptor_bddccf659a49dc88) }

var fileDescriptor_bddccf659a49dc88 = []byte{
	// 1663 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x73, 0x1b, 0x4b,
	0x11, 0xf7, 0xea, 0x63, 0x25, 0xb5, 0x3e, 0x30, 0x13, 0x3f, 0xbf, 0x45, 0x0f, 0xfc, 0xfc, 0x04,
	0x14, 0x06, 0xca, 0x72, 0x70, 0xc2, 0x47, 0xe0, 0x00, 0x89, 0x63, 0x0a, 0xd9, 0x49, 0x30, 0x2b,
	0x13, 0xaa, 0x80, 0x20, 0x46, 0xbb, 0x93, 0xf5, 0x46, 0xbb, 0x3b, 0x5b, 0x3b, 0x23, 0x13, 0x71,
	0xe2, 0x9c, 0xa2, 0x28, 0xb8, 0x73, 0xe3, 0x3f, 0xe0, 0xcc, 0x9d, 0x5c, 0xa8, 0xca, 0x31, 0x27,
	0x0a, 0x92, 0x0b, 0xff, 0x00, 0xc5, 0x81, 0x0b, 0x35, 0x1f, 0x3b, 0x5a, 0xc5, 0x72, 0x88, 0xc0,
	0xf5, 0x4e, 0x9a, 0xee, 0x99, 0xfe, 0xcd, 0xf4, 0xaf, 0x7b, 0x7a, 0x7b, 0x04, 0xd7, 0x70, 0x40,
	0x12, 0x3e, 0x4a, 0xf1, 0x2c, 0xa2, 0xd8, 0xef, 0xa7, 0x19, 0xe5, 0x14, 0x6d, 0xf8, 0x98, 0x63,
	0x9f, 0x06, 0x7d, 0x39, 0xa9, 0xe7, 0xba, 0xbb, 0x41, 0xc8, 0xcf, 0xa6, 0xe3, 0xbe, 0x47, 0xe3,
	0xbd, 0x80, 0x06, 0x74, 0x4f, 0x2e, 0x1e, 0x4f, 0x1f, 0x4b, 0x49, 0x0a, 0x72, 0xa4, 0x40, 0x7a,
	0x7f, 0xb1, 0xa0, 0x73, 0x40, 0xe3, 0x98, 0x26, 0xf7, 0x09, 0xc7, 0x02, 0x11, 0x7d, 0x16, 0xda,
	0x6a, 0xbb, 0x73, 0x92, 0xb1, 0x90, 0x26, 0x8e, 0xb5, 0x6d, 0xed, 0x34, 0xdc, 0x96, 0x54, 0x3e,
	0x54, 0x3a, 0xd4, 0x85, 0x3a, 0x0f, 0x63, 0xf2, 0x4b, 0x9a, 0x10, 0xa7, 0x24, 0xe7, 0x8d, 0x2c,
	0x00, 0xbc, 0x69, 0x96, 0x09, 0x08, 0x92, 0x52, 0xef, 0xcc, 0x29, 0x6f, 0x5b, 0x3b, 0x96, 0xdb,
	0xd2, 0xca, 0x43, 0xa1, 0x43, 0x1f, 0x42, 0x33, 0x4c, 0x38, 0xc9, 0x12, 0x1c, 0x8d, 0xc2, 0xd4,
	0xa9, 0x48, 0x0c, 0xc8, 0x55, 0x83, 0x14, 0x7d, 0x00, 0x8d, 0x74, 0x3a, 0x8e, 0x42, 0x4f, 0x4c,
	0x57, 0xd5, 0x16, 0x4a, 0x31, 0x48, 0xd1, 0xfb, 0x50, 0xc3, 0x69, 0x38, 0x9a, 0x90, 0x99, 0x63,
	0xcb, 0x29, 0x1b, 0xa7, 0xe1, 0x31, 0x99, 0xf5, 0x7e, 0x5f, 0x86, 0xce, 0x7d, 0xc2, 0xb3, 0xd0,
	0x63, 0x27, 0x8a, 0x11, 0x74, 0x08, 0x35, 0x86, 0xe3, 0x34, 0x22, 0xcc, 0xb1, 0xb6, 0xcb, 0x3b,
	0xcd, 0xfd, 0x2f, 0xf7, 0x97, 0x31, 0xd7, 0x5f, 0x34, 0xeb, 0x0f, 0xa5, 0x8d, 0x9b, 0xdb, 0xa2,
	0xef, 0x40, 0x3d, 0xd6, 0x14, 0x49, 0x8f, 0x9b, 0xfb, 0x9f, 0x5b, 0x8e, 0xb3, 0x48, 0xa7, 0x6b,
	0xac, 0xba, 0xbf, 0x2a, 0x81, 0xad, 0x50, 0xd1, 0x26, 0xd8, 0xb1, 0xdc, 0x4e, 0x93, 0xab, 0x25,
	0x84, 0xa0, 0xc2, 0x67, 0x69, 0x4e, 0xa9, 0x1c, 0x0b, 0xdd, 0x19, 0x65, 0x5c, 0xb2, 0xd8, 0x70,
	0xe5, 0x18, 0x0d, 0xc0, 0x4e, 0x69, 0x98, 0x70, 0xe6, 0x54, 0xa4, 0x4b, 0x5f, 0x59, 0xc1, 0xa5,
	0xfe, 0x89, 0xb0, 0x74, 0x35, 0x80, 0xdc, 0x12, 0x07, 0xcc, 0xa9, 0x6e, 0x97, 0xe5, 0x96, 0x38,
	0x60, 0x68, 0x07, 0xd6, 0x19, 0x9d, 0x66, 0x1e, 0x19, 0x89, 0x13, 0x8c, 0x12, 0x1c, 0x13, 0xcd,
	0x73, 0x47, 0xe9, 0x4f, 0x67, 0x29, 0x79, 0x80, 0x63, 0xd2, 0xdd, 0x85, 0xaa, 0x84, 0x43, 0x1d,
	0x28, 0x71, 0x26, 0xbd, 0x29, 0xbb, 0x25, 0xce, 0xd0, 0x06, 0x54, 0xcf, 0x71, 0x34, 0x55, 0xae,
	0x58, 0xae, 0x12, 0x7a, 0x7f, 0x2e, 0xc1, 0xc6, 0x90, 0x64, 0xe7, 0xa1, 0x47, 0x0e, 0xce, 0x88,
	0x37, 0x31, 0x41, 0xfa, 0x19, 0x74, 0x98, 0xd2, 0x8f, 0x3c, 0x39, 0xa1, 0x63, 0xf5, 0xf5, 0xe5,
	0x8e, 0x2d, 0xc3, 0x58, 0x50, 0xba, 0x6d, 0x56, 0x5c, 0x72, 0x05, 0xd1, 0xfb, 0xb5, 0x05, 0xad,
	0xe2, 0x0e, 0x82, 0x38, 0x49, 0x8c, 0x8a, 0xa0, 0x1c, 0x9b, 0x58, 0x95, 0x0a, 0xb1, 0x52, 0xcc,
	0x94, 0x0d, 0x33, 0x9b, 0x60, 0x33, 0x8e, 0xf9, 0x94, 0xc9, 0xa4, 0xaf, 0xba, 0x5a, 0x42, 0x0e,
	0xd4, 0x62, 0xc2, 0x18, 0x0e, 0x88, 0x4e, 0xf7, 0x5c, 0x34, 0x21, 0xb2, 0xe7, 0x21, 0xea, 0xfd,
	0xa6, 0x0c, 0xed, 0xc3, 0x73, 0x92, 0x70, 0x43, 0xe1, 0x6d, 0xb0, 0x89, 0x54, 0x68, 0xea, 0xbe,
	0xb8, 0xdc, 0xc1, 0x05, 0x23, 0x25, 0xb9, 0xda, 0xf0, 0x0a, 0x58, 0xfa, 0x97, 0x05, 0x55, 0x89,
	0x29, 0x12, 0x80, 0x87, 0x3c, 0xca, 0xf9, 0x51, 0x82, 0x74, 0x85, 0x3c, 0x35, 0x04, 0x89, 0xf1,
	0x05, 0x82, 0xba, 0x50, 0x4f, 0xb3, 0x90, 0x66, 0x21, 0x9f, 0xe9, 0xba, 0x60, 0x64, 0x43, 0x70,
	0xb5, 0x40, 0xf0, 0x12, 0x7a, 0xd0, 0x67, 0x00, 0x70, 0x44, 0x32, 0x2e, 0x13, 0xd8, 0xa9, 0xc9,
	0xd5, 0x0d, 0xa9, 0x11, 0xa9, 0x8b, 0xbe, 0x00, 0x9f, 0xc0, 0x41, 0x90, 0x91, 0x00, 0xf3, 0x90,
	0x26, 0xb2, 0x8e, 0xd4, 0x55, 0x7e, 0x17, 0xd4, 0xc7, 0x64, 0xb6, 0xf4, 0x26, 0x34, 0x96, 0xdd,
	0x84, 0xde, 0x1f, 0x6d, 0x68, 0x0f, 0x27, 0x84, 0x7b, 0x67, 0x79, 0x40, 0xee, 0x41, 0x9d, 0x49,
	0x85, 0xa9, 0x3c, 0x5f, 0xba, 0x24, 0x9b, 0x8b, 0x66, 0x5a, 0xba, 0x53, 0x79, 0xfe, 0xd7, 0x0f,
	0xd7, 0x5c, 0x83, 0x80, 0xbe, 0xfb, 0xbf, 0xc5, 0x26, 0xc7, 0x31, 0x11, 0x7a, 0x56, 0x05, 0x5b,
	0x6d, 0xf1, 0xb6, 0x2a, 0x74, 0x21, 0x8b, 0x3d, 0x68, 0xfb, 0x21, 0xe3, 0x59, 0x38, 0x9e, 0x0a,
	0x6e, 0x44, 0xbc, 0xde, 0x76, 0x3f, 0x97, 0x78, 0xd4, 0xbf, 0x5b, 0xb0, 0xd7, 0xc7, 0x5a, 0xc4,
	0x34, 0x91, 0xac, 0x14, 0x22, 0xf9, 0x53, 0x68, 0xfa, 0x34, 0x30, 0x44, 0xd6, 0xe4, 0xb6, 0x37,
	0x57, 0xd9, 0x36, 0xb7, 0xd6, 0x7b, 0x16, 0xe1, 0xba, 0x7f, 0xb2, 0xa0, 0x55, 0x3c, 0xd7, 0x85,
	0x3a, 0xb6, 0x0e, 0x65, 0x2f, 0x51, 0x54, 0x94, 0x5d, 0x31, 0x14, 0x9a, 0x38, 0x4c, 0xf4, 0x47,
	0x4d, 0x0c, 0xa5, 0x06, 0x3f, 0x95, 0xb9, 0x2a, 0x34, 0xf8, 0xa9, 0xd0, 0xe0, 0xf3, 0x40, 0x66,
	0xa9, 0xe5, 0x8a, 0xa1, 0xd0, 0xb0, 0x69, 0x2c, 0xab, 0xa8, 0xe5, 0x8a, 0x21, 0x6a, 0x81, 0x75,
	0x2e, 0xdd, 0xb1, 0x5c, 0xeb, 0x5c, 0x48, 0x81, 0x53, 0xdf, 0x2e, 0xef, 0xb4, 0x5d, 0x2b, 0x10,
	0x97, 0xc7, 0x27, 0x11, 0xc7, 0x4e, 0x43, 0x6a, 0x94, 0x20, 0x30, 0xc6, 0xd3, 0xc7, 0x0e, 0x48,
	0x1b, 0x31, 0xec, 0xfe, 0xce, 0x82, 0x86, 0xf1, 0xef, 0xe3, 0x3d, 0xfb, 0x44, 0x9e, 0xfd, 0x93,
	0xae, 0x35, 0x11, 0x52, 0x92, 0x9f, 0x3d, 0x39, 0xaa, 0xd4, 0xab, 0xeb, 0xf6, 0x51, 0xa5, 0x6e,
	0xaf, 0xd7, 0xdc, 0xce, 0x42, 0x7c, 0x8f, 0xdf, 0x90, 0x0f, 0x7a, 0xff, 0x2c, 0xc1, 0xb5, 0xef,
	0x51, 0xc6, 0xf3, 0x6c, 0xcd, 0xaf, 0xce, 0x23, 0xe8, 0x88, 0xac, 0x63, 0x23, 0x93, 0xf2, 0xea,
	0x02, 0x7d, 0x6d, 0x79, 0xdc, 0x97, 0x40, 0x2c, 0xe8, 0xdc, 0xb6, 0x44, 0x33, 0x2d, 0xce, 0xff,
	0x5f, 0xe7, 0xae, 0x83, 0x7d, 0x8a, 0x83, 0x21, 0xe1, 0xe6, 0x93, 0x6d, 0x2d, 0x7e, 0xb2, 0x65,
	0x1e, 0x97, 0xe6, 0x79, 0xdc, 0x7d, 0x66, 0x41, 0xab, 0x78, 0x26, 0x51, 0xe6, 0xc4, 0xa9, 0x0a,
	0xdf, 0x10, 0x23, 0xa3, 0xbb, 0x05, 0x80, 0xe6, 0xfe, 0xf5, 0x77, 0xf7, 0x5a, 0x1d, 0x4a, 0x5f,
	0x1d, 0x07, 0x6a, 0x38, 0x0a, 0x31, 0x23, 0xea, 0xb6, 0x36, 0xdc, 0x5c, 0xec, 0xfd, 0xbd, 0x0d,
	0xd7, 0x8e, 0xa7, 0x63, 0xf2, 0x26, 0xef, 0x0f, 0xa1, 0xe9, 0x93, 0x34, 0xa2, 0xb3, 0xb8, 0xf0,
	0x21, 0xb9, 0xe4, 0xb2, 0x2d, 0xb1, 0xef, 0xdf, 0x35, 0xc6, 0x6e, 0x11, 0x08, 0xfd, 0x08, 0x5a,
	0x19, 0x49, 0xa3, 0xd0, 0xc3, 0x23, 0x46, 0x78, 0xee, 0xd7, 0x0a, 0xc0, 0xae, 0xb2, 0x16, 0xbe,
	0x35, 0x33, 0x33, 0x66, 0xe8, 0x14, 0x9a, 0x3e, 0x26, 0x31, 0x4d, 0x14, 0xae, 0x2a, 0x4a, 0x37,
	0x56, 0x38, 0xb0, 0x34, 0x16, 0xb0, 0xe0, 0xe7, 0x43, 0x86, 0xee, 0x43, 0x5d, 0xb7, 0x0f, 0xff,
	0xa5, 0xc1, 0x5a, 0x06, 0xa9, 0x9b, 0x04, 0xd7, 0x40, 0xa0, 0xdb, 0x50, 0x79, 0x42, 0xc7, 0xaa,
	0xc5, 0x6a, 0xee, 0xef, 0xbe, 0x3b, 0xd4, 0x11, 0x1d, 0xbb, 0xd2, 0x54, 0x40, 0xa4, 0xd4, 0x57,
	0xdf, 0xb8, 0x95, 0x20, 0x4e, 0xa8, 0xef, 0x4a, 0x53, 0x34, 0x04, 0xf0, 0x68, 0xc2, 0x71, 0x98,
	0x90, 0x2c, 0xaf, 0xa3, 0x2b, 0x30, 0x75, 0x90, 0xdb, 0xba, 0x05, 0x98, 0xee, 0x09, 0xc0, 0x3c,
	0xe6, 0xa2, 0x50, 0x4c, 0x43, 0x5f, 0x67, 0xb3, 0x18, 0x9a, 0x26, 0xa9, 0x54, 0x68, 0x92, 0x3e,
	0x0d, 0x0d, 0xf1, 0xcb, 0x52, 0xec, 0x11, 0xdd, 0xd5, 0xce, 0x15, 0xdd, 0x14, 0x60, 0x1e, 0xec,
	0xab, 0x40, 0x44, 0x5b, 0x00, 0xf3, 0x5c, 0xcc, 0x5f, 0x1a, 0x73, 0x4d, 0xf7, 0xfb, 0xd0, 0x30,
	0x69, 0x70, 0x25, 0x2e, 0xfc, 0xdb, 0x82, 0x9a, 0xce, 0x82, 0x2b, 0x71, 0xe0, 0x27, 0x22, 0x1d,
	0x23, 0xe2, 0x71, 0x9a, 0xe9, 0x74, 0xfc, 0xf6, 0xca, 0xe9, 0xd8, 0x1f, 0x6a, 0x84, 0xc3, 0x84,
	0x67, 0x33, 0xd7, 0x00, 0x9a, 0xfa, 0x55, 0x9d, 0xd7, 0xaf, 0xee, 0xb7, 0xa0, 0xbd, 0xb0, 0x5c,
	0x78, 0x21, 0x7a, 0x24, 0xed, 0xc5, 0x84, 0xcc, 0x16, 0xfb, 0xfb, 0x86, 0xee, 0xef, 0xbf, 0x59,
	0xfa, 0x86, 0xd5, 0x1d, 0x40, 0xf9, 0x88, 0x8e, 0xaf, 0x84, 0xc8, 0x97, 0x65, 0x28, 0x9f, 0x50,
	0xff, 0x4a, 0x48, 0x7c, 0x1f, 0x6a, 0xa2, 0xbc, 0xce, 0x1f, 0x9b, 0xb6, 0x10, 0x07, 0x29, 0x7a,
	0x4f, 0xbc, 0xa5, 0xfc, 0xf9, 0x2b, 0xb3, 0x9a, 0x52, 0x7f, 0x90, 0xa2, 0x1f, 0x80, 0x1d, 0xe1,
	0x31, 0x89, 0xf2, 0x3b, 0x77, 0x6b, 0xa5, 0x3b, 0xd7, 0xbf, 0x27, 0x6d, 0x15, 0xd9, 0x1a, 0x08,
	0x7d, 0x04, 0xad, 0xfc, 0x91, 0x33, 0x0d, 0x7d, 0x75, 0x07, 0x1b, 0x6e, 0x53, 0xeb, 0x7e, 0x18,
	0xfa, 0x4c, 0xbe, 0x9d, 0xf3, 0xdb, 0x35, 0x12, 0x6b, 0xea, 0x72, 0x4d, 0xcb, 0x28, 0x07, 0xbe,
	0x6c, 0x6e, 0xe7, 0x45, 0x4f, 0xb7, 0xa3, 0x0d, 0x53, 0xbe, 0xc4, 0xd3, 0xba, 0x50, 0x6c, 0x1d,
	0x50, 0x09, 0x3f, 0xaf, 0x9a, 0xe8, 0xab, 0xb0, 0xa9, 0x25, 0xd9, 0xfd, 0x0a, 0xec, 0x8c, 0x46,
	0x11, 0xc9, 0x9c, 0xa6, 0x5c, 0xfb, 0x5e, 0x61, 0xf6, 0xc0, 0x4c, 0x8a, 0x28, 0x3c, 0xa1, 0x63,
	0xa7, 0xa5, 0xa2, 0xf0, 0x84, 0x8e, 0xbb, 0xb7, 0xa0, 0x59, 0xf0, 0x73, 0xa5, 0x2c, 0xf9, 0x39,
	0x34, 0x4c, 0x45, 0x11, 0x8d, 0x8b, 0x09, 0x6f, 0xe9, 0x92, 0xe8, 0x6e, 0x40, 0x35, 0x8c, 0xc5,
	0xe3, 0x48, 0x45, 0x56, 0x09, 0xe8, 0x53, 0x50, 0x97, 0x83, 0x51, 0xe8, 0xeb, 0xb0, 0xd6, 0xa4,
	0x3c, 0xf0, 0x7b, 0x7f, 0x28, 0x03, 0x3a, 0x3c, 0x18, 0xbe, 0xf9, 0x89, 0x3b, 0x80, 0x2a, 0xc7,
	0xcc, 0x3c, 0x30, 0x2f, 0x29, 0xa5, 0x17, 0x0d, 0xfb, 0xa7, 0x98, 0x4d, 0x5c, 0x65, 0xdb, 0xfd,
	0x87, 0x05, 0x15, 0x21, 0xcb, 0x66, 0x29, 0xcb, 0xff, 0x22, 0x11, 0x43, 0xf4, 0x79, 0xe8, 0xf8,
	0x84, 0x85, 0x19, 0xf1, 0x47, 0xfa, 0x99, 0xa7, 0xbc, 0x68, 0x6b, 0xed, 0x50, 0xbd, 0xf6, 0x3e,
	0x82, 0xd6, 0x24, 0xa1, 0xbf, 0x48, 0xf2, 0x45, 0xca, 0xab, 0xa6, 0xd4, 0xe9, 0x25, 0x9b, 0x60,
	0x3f, 0xc6, 0x71, 0x18, 0xe5, 0xaf, 0x20, 0x2d, 0x89, 0xcf, 0x7a, 0xfe, 0xd7, 0x8c, 0x7e, 0x28,
	0x6a, 0x11, 0xb9, 0x0b, 0x25, 0x5e, 0xe5, 0xed, 0xfe, 0x3b, 0x3b, 0xb8, 0xbc, 0xc2, 0x3f, 0x2a,
	0x06, 0xea, 0x03, 0x68, 0xf8, 0xd4, 0x9b, 0xc8, 0xdc, 0xcc, 0x9b, 0x16, 0xa5, 0x18, 0xf8, 0x22,
	0xef, 0xf4, 0x64, 0x21, 0x78, 0xa0, 0x54, 0x0f, 0xf4, 0xeb, 0x58, 0xce, 0x94, 0xe7, 0x61, 0xbd,
	0xf3, 0xe0, 0xf9, 0xab, 0x2d, 0xeb, 0xc5, 0xab, 0x2d, 0xeb, 0x6f, 0xaf, 0xb6, 0xac, 0xdf, 0xbe,
	0xde, 0x5a, 0x7b, 0xf1, 0x7a, 0x6b, 0xed, 0xe5, 0xeb, 0xad, 0xb5, 0x1f, 0xdf, 0x2c, 0xfc, 0x93,
	0x35, 0xe4, 0xd8, 0x9b, 0x3c, 0x0c, 0x19, 0xc7, 0x7b, 0x4c, 0x0c, 0x05, 0x69, 0x64, 0x37, 0xcd,
	0xa8, 0x47, 0x18, 0xdb, 0x95, 0x8e, 0xed, 0xc5, 0xd4, 0x27, 0xd1, 0xd8, 0x96, 0xff, 0x6b, 0xdd,
	0xf8, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0xb3, 0xb5, 0x2e, 0x33, 0x13, 0x00, 0x00,
}

func (m *CommonMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommonMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CommonMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ApiKey) > 0 {
		i -= len(m.ApiKey)
		copy(dAtA[i:], m.ApiKey)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ApiKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.PublicIp) > 0 {
		i -= len(m.PublicIp)
		copy(dAtA[i:], m.PublicIp)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.PublicIp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InternalIp) > 0 {
		i -= len(m.InternalIp)
		copy(dAtA[i:], m.InternalIp)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.InternalIp)))
		i--
		dAtA[i] = 0x22
	}
	if m.CurrentEpoch != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CurrentEpoch))))
		i--
		dAtA[i] = 0x19
	}
	if len(m.Timezone) > 0 {
		i -= len(m.Timezone)
		copy(dAtA[i:], m.Timezone)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Timezone)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AgentVersion) > 0 {
		i -= len(m.AgentVersion)
		copy(dAtA[i:], m.AgentVersion)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AgentVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetricsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentPayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Samples) > 0 {
		for iNdEx := len(m.Samples) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Samples[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MetricsPayload_Sample) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayload_Sample) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsPayload_Sample) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceTypeName) > 0 {
		i -= len(m.SourceTypeName)
		copy(dAtA[i:], m.SourceTypeName)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.SourceTypeName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MetricsPayload_Sample_Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetricsPayload_Sample_Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MetricsPayload_Sample_Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Value))))
		i--
		dAtA[i] = 0x11
	}
	if m.Ts != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceChecksPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceChecksPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceChecksPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentPayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ServiceChecks) > 0 {
		for iNdEx := len(m.ServiceChecks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceChecks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ServiceChecksPayload_ServiceCheck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceChecksPayload_ServiceCheck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceChecksPayload_ServiceCheck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Ts != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventsPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventsPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentPayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventsPayload_Event) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventsPayload_Event) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventsPayload_Event) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SourceTypeName) > 0 {
		i -= len(m.SourceTypeName)
		copy(dAtA[i:], m.SourceTypeName)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.SourceTypeName)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AggregationKey) > 0 {
		i -= len(m.AggregationKey)
		copy(dAtA[i:], m.AggregationKey)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AggregationKey)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AlertType) > 0 {
		i -= len(m.AlertType)
		copy(dAtA[i:], m.AlertType)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.AlertType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Priority) > 0 {
		i -= len(m.Priority)
		copy(dAtA[i:], m.Priority)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Priority)))
		i--
		dAtA[i] = 0x22
	}
	if m.Ts != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Text) > 0 {
		i -= len(m.Text)
		copy(dAtA[i:], m.Text)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Text)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SketchPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SketchPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintAgentPayload(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sketches) > 0 {
		for iNdEx := len(m.Sketches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sketches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SketchPayload_Sketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload_Sketch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SketchPayload_Sketch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Dogsketches) > 0 {
		for iNdEx := len(m.Dogsketches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Dogsketches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Distributions) > 0 {
		for iNdEx := len(m.Distributions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Distributions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Metric) > 0 {
		i -= len(m.Metric)
		copy(dAtA[i:], m.Metric)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Metric)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SketchPayload_Sketch_Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload_Sketch_Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SketchPayload_Sketch_Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Buf) > 0 {
		for iNdEx := len(m.Buf) - 1; iNdEx >= 0; iNdEx-- {
			f5 := math.Float64bits(float64(m.Buf[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f5))
		}
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Buf)*8))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Delta) > 0 {
		dAtA7 := make([]byte, len(m.Delta)*10)
		var j6 int
		for _, num := range m.Delta {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintAgentPayload(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.G) > 0 {
		dAtA9 := make([]byte, len(m.G)*10)
		var j8 int
		for _, num := range m.G {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintAgentPayload(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x42
	}
	if len(m.V) > 0 {
		for iNdEx := len(m.V) - 1; iNdEx >= 0; iNdEx-- {
			f10 := math.Float64bits(float64(m.V[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f10))
		}
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.V)*8))
		i--
		dAtA[i] = 0x3a
	}
	if m.Sum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i--
		dAtA[i] = 0x31
	}
	if m.Avg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i--
		dAtA[i] = 0x29
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x21
	}
	if m.Min != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i--
		dAtA[i] = 0x19
	}
	if m.Cnt != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x10
	}
	if m.Ts != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SketchPayload_Sketch_Dogsketch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SketchPayload_Sketch_Dogsketch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SketchPayload_Sketch_Dogsketch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.N) > 0 {
		dAtA12 := make([]byte, len(m.N)*10)
		var j11 int
		for _, num := range m.N {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintAgentPayload(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x42
	}
	if len(m.K) > 0 {
		dAtA13 := make([]byte, len(m.K)*5)
		var j14 int
		for _, num := range m.K {
			x15 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x15 >= 1<<7 {
				dAtA13[j14] = uint8(uint64(x15)&0x7f | 0x80)
				j14++
				x15 >>= 7
			}
			dAtA13[j14] = uint8(x15)
			j14++
		}
		i -= j14
		copy(dAtA[i:], dAtA13[:j14])
		i = encodeVarintAgentPayload(dAtA, i, uint64(j14))
		i--
		dAtA[i] = 0x3a
	}
	if m.Sum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Sum))))
		i--
		dAtA[i] = 0x31
	}
	if m.Avg != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Avg))))
		i--
		dAtA[i] = 0x29
	}
	if m.Max != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i--
		dAtA[i] = 0x21
	}
	if m.Min != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i--
		dAtA[i] = 0x19
	}
	if m.Cnt != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Cnt))
		i--
		dAtA[i] = 0x10
	}
	if m.Ts != 0 {
		i = encodeVarintAgentPayload(dAtA, i, uint64(m.Ts))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HostMetadataPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostMetadataPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintAgentPayload(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.HostsMetadata) > 0 {
		for iNdEx := len(m.HostsMetadata) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HostsMetadata[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *HostMetadataPayload_TagSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataPayload_TagSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostMetadataPayload_TagSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostMetadataPayload_HostMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostMetadataPayload_HostMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostMetadataPayload_HostMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Aliases) > 0 {
		for iNdEx := len(m.Aliases) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Aliases[iNdEx])
			copy(dAtA[i:], m.Aliases[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Aliases[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tags[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Hostname) > 0 {
		i -= len(m.Hostname)
		copy(dAtA[i:], m.Hostname)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Hostname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for iNdEx := len(m.Containers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Containers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Pods) > 0 {
		for iNdEx := len(m.Pods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Jobs) > 0 {
		for iNdEx := len(m.Jobs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Jobs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DaemonSets) > 0 {
		for iNdEx := len(m.DaemonSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DaemonSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ReplicaSets) > 0 {
		for iNdEx := len(m.ReplicaSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ReplicaSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Deployments) > 0 {
		for iNdEx := len(m.Deployments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deployments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_Deployment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_Deployment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_Deployment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_ReplicaSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_ReplicaSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_ReplicaSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deployment) > 0 {
		i -= len(m.Deployment)
		copy(dAtA[i:], m.Deployment)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Deployment)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_DaemonSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_DaemonSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_DaemonSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Selector) > 0 {
		for k := range m.Selector {
			v := m.Selector[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAgentPayload(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_Job) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_Job) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_Job) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_Pod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_Pod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_Pod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Job) > 0 {
		i -= len(m.Job)
		copy(dAtA[i:], m.Job)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Job)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ReplicationController) > 0 {
		i -= len(m.ReplicationController)
		copy(dAtA[i:], m.ReplicationController)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ReplicationController)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.ReplicaSet) > 0 {
		i -= len(m.ReplicaSet)
		copy(dAtA[i:], m.ReplicaSet)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ReplicaSet)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.DaemonSet) > 0 {
		i -= len(m.DaemonSet)
		copy(dAtA[i:], m.DaemonSet)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DaemonSet)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ContainerIds) > 0 {
		for iNdEx := len(m.ContainerIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ContainerIds[iNdEx])
			copy(dAtA[i:], m.ContainerIds[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ContainerIds[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.ServiceUids) > 0 {
		for iNdEx := len(m.ServiceUids) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ServiceUids[iNdEx])
			copy(dAtA[i:], m.ServiceUids[iNdEx])
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ServiceUids[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAgentPayload(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAgentPayload(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.PodIp) > 0 {
		i -= len(m.PodIp)
		copy(dAtA[i:], m.PodIp)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.PodIp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HostIp) > 0 {
		i -= len(m.HostIp)
		copy(dAtA[i:], m.HostIp)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.HostIp)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubeMetadataPayload_Container) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubeMetadataPayload_Container) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubeMetadataPayload_Container) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ECSMetadataPayload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECSMetadataPayload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ECSMetadataPayload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for iNdEx := len(m.Tasks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tasks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ECSMetadataPayload_Task) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECSMetadataPayload_Task) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ECSMetadataPayload_Task) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Containers) > 0 {
		for iNdEx := len(m.Containers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Containers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAgentPayload(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Family) > 0 {
		i -= len(m.Family)
		copy(dAtA[i:], m.Family)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Family)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KnownStatus) > 0 {
		i -= len(m.KnownStatus)
		copy(dAtA[i:], m.KnownStatus)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.KnownStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DesiredStatus) > 0 {
		i -= len(m.DesiredStatus)
		copy(dAtA[i:], m.DesiredStatus)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DesiredStatus)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Arn) > 0 {
		i -= len(m.Arn)
		copy(dAtA[i:], m.Arn)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Arn)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ECSMetadataPayload_Container) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECSMetadataPayload_Container) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ECSMetadataPayload_Container) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DockerName) > 0 {
		i -= len(m.DockerName)
		copy(dAtA[i:], m.DockerName)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DockerName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DockerId) > 0 {
		i -= len(m.DockerId)
		copy(dAtA[i:], m.DockerId)
		i = encodeVarintAgentPayload(dAtA, i, uint64(len(m.DockerId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgentPayload(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgentPayload(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CommonMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AgentVersion)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Timezone)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.CurrentEpoch != 0 {
		n += 9
	}
	l = len(m.InternalIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.PublicIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.ApiKey)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *MetricsPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Samples) > 0 {
		for _, e := range m.Samples {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *MetricsPayload_Sample) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = len(m.SourceTypeName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *MetricsPayload_Sample_Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Value != 0 {
		n += 9
	}
	return n
}

func (m *ServiceChecksPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceChecks) > 0 {
		for _, e := range m.ServiceChecks {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *ServiceChecksPayload_ServiceCheck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Status != 0 {
		n += 1 + sovAgentPayload(uint64(m.Status))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *EventsPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *EventsPayload_Event) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Text)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	l = len(m.Priority)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = len(m.AlertType)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.AggregationKey)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.SourceTypeName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *SketchPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sketches) > 0 {
		for _, e := range m.Sketches {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = m.Metadata.Size()
	n += 1 + l + sovAgentPayload(uint64(l))
	return n
}

func (m *SketchPayload_Sketch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Metric)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Distributions) > 0 {
		for _, e := range m.Distributions {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Dogsketches) > 0 {
		for _, e := range m.Dogsketches {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *SketchPayload_Sketch_Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Cnt != 0 {
		n += 1 + sovAgentPayload(uint64(m.Cnt))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Avg != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if len(m.V) > 0 {
		n += 1 + sovAgentPayload(uint64(len(m.V)*8)) + len(m.V)*8
	}
	if len(m.G) > 0 {
		l = 0
		for _, e := range m.G {
			l += sovAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	if len(m.Delta) > 0 {
		l = 0
		for _, e := range m.Delta {
			l += sovAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	if len(m.Buf) > 0 {
		n += 1 + sovAgentPayload(uint64(len(m.Buf)*8)) + len(m.Buf)*8
	}
	return n
}

func (m *SketchPayload_Sketch_Dogsketch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ts != 0 {
		n += 1 + sovAgentPayload(uint64(m.Ts))
	}
	if m.Cnt != 0 {
		n += 1 + sovAgentPayload(uint64(m.Cnt))
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.Avg != 0 {
		n += 9
	}
	if m.Sum != 0 {
		n += 9
	}
	if len(m.K) > 0 {
		l = 0
		for _, e := range m.K {
			l += sozAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	if len(m.N) > 0 {
		l = 0
		for _, e := range m.N {
			l += sovAgentPayload(uint64(e))
		}
		n += 1 + sovAgentPayload(uint64(l)) + l
	}
	return n
}

func (m *HostMetadataPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HostsMetadata) > 0 {
		for _, e := range m.HostsMetadata {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *HostMetadataPayload_TagSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *HostMetadataPayload_HostMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hostname)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Aliases) > 0 {
		for _, s := range m.Aliases {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *KubeMetadataPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Deployments) > 0 {
		for _, e := range m.Deployments {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.ReplicaSets) > 0 {
		for _, e := range m.ReplicaSets {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.DaemonSets) > 0 {
		for _, e := range m.DaemonSets {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Jobs) > 0 {
		for _, e := range m.Jobs {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Pods) > 0 {
		for _, e := range m.Pods {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *KubeMetadataPayload_Deployment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *KubeMetadataPayload_ReplicaSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Deployment)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *KubeMetadataPayload_DaemonSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *KubeMetadataPayload_Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Selector) > 0 {
		for k, v := range m.Selector {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgentPayload(uint64(len(k))) + 1 + len(v) + sovAgentPayload(uint64(len(v)))
			n += mapEntrySize + 1 + sovAgentPayload(uint64(mapEntrySize))
		}
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *KubeMetadataPayload_Job) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *KubeMetadataPayload_Pod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.HostIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.PodIp)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAgentPayload(uint64(len(k))) + 1 + len(v) + sovAgentPayload(uint64(len(v)))
			n += mapEntrySize + 1 + sovAgentPayload(uint64(mapEntrySize))
		}
	}
	if len(m.ServiceUids) > 0 {
		for _, s := range m.ServiceUids {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	if len(m.ContainerIds) > 0 {
		for _, s := range m.ContainerIds {
			l = len(s)
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	l = len(m.DaemonSet)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.ReplicaSet)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.ReplicationController)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Job)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *KubeMetadataPayload_Container) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func (m *ECSMetadataPayload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tasks) > 0 {
		for _, e := range m.Tasks {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *ECSMetadataPayload_Task) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Arn)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.DesiredStatus)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.KnownStatus)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Family)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	if len(m.Containers) > 0 {
		for _, e := range m.Containers {
			l = e.Size()
			n += 1 + l + sovAgentPayload(uint64(l))
		}
	}
	return n
}

func (m *ECSMetadataPayload_Container) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DockerId)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.DockerName)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAgentPayload(uint64(l))
	}
	return n
}

func sovAgentPayload(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgentPayload(x uint64) (n int) {
	return sovAgentPayload(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CommonMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommonMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommonMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AgentVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AgentVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timezone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timezone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentEpoch", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CurrentEpoch = float64(math.Float64frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InternalIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InternalIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApiKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetricsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetricsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Samples = append(m.Samples, &MetricsPayload_Sample{})
			if err := m.Samples[len(m.Samples)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayload_Sample) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sample: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sample: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &MetricsPayload_Sample_Point{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetricsPayload_Sample_Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Value = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceChecksPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceChecksPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceChecksPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceChecks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceChecks = append(m.ServiceChecks, &ServiceChecksPayload_ServiceCheck{})
			if err := m.ServiceChecks[len(m.ServiceChecks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceChecksPayload_ServiceCheck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceCheck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceCheck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventsPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventsPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &EventsPayload_Event{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventsPayload_Event) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Event: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Event: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Text", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Text = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Priority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Priority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlertType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlertType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceTypeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceTypeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SketchPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SketchPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sketches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sketches = append(m.Sketches, SketchPayload_Sketch{})
			if err := m.Sketches[len(m.Sketches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload_Sketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metric", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metric = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distributions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Distributions = append(m.Distributions, SketchPayload_Sketch_Distribution{})
			if err := m.Distributions[len(m.Distributions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dogsketches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dogsketches = append(m.Dogsketches, SketchPayload_Sketch_Dogsketch{})
			if err := m.Dogsketches[len(m.Dogsketches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload_Sketch_Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 7:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.V = append(m.V, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgentPayload
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.V) == 0 {
					m.V = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.V = append(m.V, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.G = append(m.G, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgentPayload
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.G) == 0 {
					m.G = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.G = append(m.G, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field G", wireType)
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Delta = append(m.Delta, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgentPayload
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Delta) == 0 {
					m.Delta = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Delta = append(m.Delta, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Delta", wireType)
			}
		case 10:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Buf = append(m.Buf, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgentPayload
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Buf) == 0 {
					m.Buf = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Buf = append(m.Buf, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Buf", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SketchPayload_Sketch_Dogsketch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dogsketch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dogsketch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ts", wireType)
			}
			m.Ts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ts |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cnt", wireType)
			}
			m.Cnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avg", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Avg = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Sum = float64(math.Float64frombits(v))
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.K = append(m.K, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgentPayload
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.K) == 0 {
					m.K = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.K = append(m.K, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field K", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.N = append(m.N, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAgentPayload
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAgentPayload
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.N) == 0 {
					m.N = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.N = append(m.N, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostMetadataPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostMetadataPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostsMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostsMetadata = append(m.HostsMetadata, &HostMetadataPayload_HostMetadata{})
			if err := m.HostsMetadata[len(m.HostsMetadata)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &CommonMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataPayload_TagSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostMetadataPayload_HostMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hostname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hostname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &HostMetadataPayload_TagSet{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aliases", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aliases = append(m.Aliases, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubeMetadataPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubeMetadataPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployments = append(m.Deployments, &KubeMetadataPayload_Deployment{})
			if err := m.Deployments[len(m.Deployments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicaSets = append(m.ReplicaSets, &KubeMetadataPayload_ReplicaSet{})
			if err := m.ReplicaSets[len(m.ReplicaSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaemonSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaemonSets = append(m.DaemonSets, &KubeMetadataPayload_DaemonSet{})
			if err := m.DaemonSets[len(m.DaemonSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, &KubeMetadataPayload_Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Jobs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Jobs = append(m.Jobs, &KubeMetadataPayload_Job{})
			if err := m.Jobs[len(m.Jobs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pods = append(m.Pods, &KubeMetadataPayload_Pod{})
			if err := m.Pods[len(m.Pods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &KubeMetadataPayload_Container{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_Deployment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deployment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deployment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_ReplicaSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplicaSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplicaSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deployment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deployment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_DaemonSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DaemonSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DaemonSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgentPayload
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAgentPayload
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgentPayload(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Selector[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_Job) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Job: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Job: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_Pod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAgentPayload
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAgentPayload
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAgentPayload
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthAgentPayload
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAgentPayload(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthAgentPayload
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceUids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceUids = append(m.ServiceUids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerIds = append(m.ContainerIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DaemonSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DaemonSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaSet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicaSet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicationController", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicationController = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Job = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubeMetadataPayload_Container) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSMetadataPayload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECSMetadataPayload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECSMetadataPayload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tasks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tasks = append(m.Tasks, &ECSMetadataPayload_Task{})
			if err := m.Tasks[len(m.Tasks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSMetadataPayload_Task) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Task: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Task: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Arn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DesiredStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KnownStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KnownStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Family", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Family = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Containers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Containers = append(m.Containers, &ECSMetadataPayload_Container{})
			if err := m.Containers[len(m.Containers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECSMetadataPayload_Container) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Container: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Container: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DockerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DockerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentPayload
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAgentPayload(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentPayload
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentPayload(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentPayload
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentPayload
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgentPayload
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgentPayload
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgentPayload
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgentPayload        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentPayload          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgentPayload = fmt.Errorf("proto: unexpected end of group")
)
